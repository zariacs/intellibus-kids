name: Deploy to AWS EC2

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        export AWS_REGION="us-east-1"
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com

    - name: Ensure AWS ECR Repositories Exist
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        export AWS_REGION="us-east-1"
        for repo in my-frontend my-backend my-ai; do
          aws ecr describe-repositories --repository-names $repo --region us-east-1 || \
          aws ecr create-repository --repository-name $repo --region us-east-1
        done

    - name: Deploy to EC2
      env:
          EC2_HOST: 3.219.34.114
          EC2_USER: ec2-user
          SSH_PRIVATE_KEY: ${{ secrets.OPENSSH_PRIVATE_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEVIN: ${{ secrets.NEVIN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_API: ${{ secrets.SUPABASE_API}}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}}
      

      run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem
      

          cat <<EOF > .env
            AWS_REGION=us-east-1
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            NEVIN=${{ secrets.NEVIN }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_API=${{ secrets.SUPABASE_API }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          EOF

          # Ensure docker-compose.yml is copied
          scp -i deploy_key.pem -o StrictHostKeyChecking=no .env docker-compose.yml ec2-user@$EC2_HOST:/home/ec2-user/
          
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_REGION=us-east-1 bash -s" << 'EOF'
      
          set -o allexport
          source /home/ec2-user/.env
          set +o allexport
          
          echo "AWS_REGION=${AWS_REGION}"
          echo "SUPABASE url = ${SUPABASE_URL}""
      
          # Configure AWS CLI to use passed secrets
          aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
          aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
          aws configure set region ${AWS_REGION}
      
          # ✅ Install Docker & Docker Compose
          if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
          fi
      
          if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          fi
      
          # ✅ AWS ECR Authentication
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
      
          # ✅ Pull latest images
          docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/my-frontend:latest
          docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/my-backend:latest
          docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/my-ai:latest
      
          # ✅ Deploy with Docker Compose
          docker-compose -f /home/ec2-user/docker-compose.yml down --remove-orphans
          docker-compose -f /home/ec2-user/docker-compose.yml up -d --force-recreate
          
          EOF
      