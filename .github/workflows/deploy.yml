name: Deploy to AWS EC2

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        export AWS_REGION="us-east-1"
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com

    - name: Ensure AWS ECR Repositories Exist
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        export AWS_REGION="us-east-1"
        for repo in my-frontend my-backend my-ai; do
          aws ecr describe-repositories --repository-names $repo --region us-east-1 || \
          aws ecr create-repository --repository-name $repo --region us-east-1
        done

    - name: Upload Docker Compose File
      run: |
        echo "$SSH_PRIVATE_KEY" > deploy_key.pem
        chmod 600 deploy_key.pem
        scp -i deploy_key.pem -o StrictHostKeyChecking=no docker-compose.yml ec2-user@$EC2_HOST:/home/ec2-user/

    - name: Deploy to EC2
      env:
        EC2_HOST: 3.219.34.114
        EC2_USER: ec2-user
        SSH_PRIVATE_KEY: ${{ secrets.OPENSSH_PRIVATE_KEY }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        echo "$SSH_PRIVATE_KEY" > deploy_key.pem
        chmod 600 deploy_key.pem

        ssh -tt -i deploy_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "bash -s" << 'EOF'
        
        export AWS_REGION="us-east-1"
        export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}

        echo "AWS_REGION=${AWS_REGION}"
        echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}"

        # ✅ Install Docker & Docker Compose if missing
        if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
        fi

        if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
        fi

        # ✅ AWS ECR Authentication (No TTY)
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com

        # ✅ Pull latest images
        docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/my-frontend:latest
        docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/my-backend:latest
        docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/my-ai:latest

        # ✅ Deploy with Docker Compose
        docker-compose -f /home/ec2-user/docker-compose.yml down --remove-orphans
        docker-compose -f /home/ec2-user/docker-compose.yml up -d --force-recreate
        
        EOF
